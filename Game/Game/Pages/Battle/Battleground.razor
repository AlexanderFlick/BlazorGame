@page "/battle/ground"
@using Game.Data;
@using Game.Data.Dinosaurs.DinosaurMoves;
@using Game.Data.Enemies;
@using Game.Pages.Components.BattleComponents
@using Game.Pages.Components.DinosaurComponents
@using Game.Pages.Components.EnemyComponents
@using Game.Pages.Party
@using Game.Services;
@inject IEnemyService EnemyService;
@inject IBattleService BattleService;
@inject NavigationManager NavigationManager

<div>

    @if (!player.Battle.Won)
    {
        <h1>@player.Ultimate.Name: @player.Ultimate.CurrentCharge/@player.Ultimate.MaxCharge</h1>
        foreach (var newEnemy in enemies)
        {
            <BaseEnemy EnemyToFight="newEnemy" />
        }

        @if (!MoveSelectedForEachDinosaur)
        {
            <div class="alert alert-danger" role="alert">
                <p>Select a move for each dinosaur before starting your turn!</p>
            </div>
        }
        
        @foreach (var dinosaur in player.Dinosaurs)
        {
            <div style="float:left; margin-left:30px;">
                @if (dinosaur.Battle.Selected)
                {
                    <DinosaurName dinosaurToName="dinosaur" />
                    <p>Health: @dinosaur.CurrentHealth/@dinosaur.TotalHealth</p>
                    <DinosaurMoves DinoMoves="dinosaur.Moves" InBattle="true" />
                }
            </div>
        }

        <div style="float:none;">
            <button class="btn btn-primary" @onclick="TakeTurn">Take Turn!</button>
            <br />
            <button style="margin-top:10px;" class="btn btn-primary" @onclick="UseUltimate">Use Ultimate!</button>
        </div>

        @if (turnOccured)
        {
            <TurnSummary TurnSummaries="turnSummary" />
        }
    }


    <BattleWon WonGame="player.Battle.Won" />
    <BattleLost playerDinosaurs="player.Dinosaurs" />

</div>


@code {
    [CascadingParameter]
    public Player player { get; set; }
    public List<Enemy> enemies = new List<Enemy>();
    public List<MoveSummary> turnSummary = new List<MoveSummary>();
    private bool SelectingMove { get; set; }
    private bool turnOccured { get; set; }
    private bool MoveSelectedForEachDinosaur = true;

    protected override async Task OnInitializedAsync()
    {
        if (player.Battle.FirstRound)
        {
            enemies.Add(EnemyService.CreateEnemy());
        }
    }

    private void TakeTurn()
    {
        MoveSelectedForEachDinosaur = BattleService.MoveSelectedForEachDinosaur(player);
        if (!MoveSelectedForEachDinosaur)
        {
            MoveSelectedForEachDinosaur = false;
            return;
        }

        foreach (var enemyToFight in enemies)
        {
            BattleService.SetEnemyMove(enemyToFight);
        }

        turnSummary = BattleService.BattleRound(player, enemies);
        player.Battle.Won = BattleService.AllEnemiesAreDead(enemies);
        BattleService.ResetMoves(player, enemies);
        turnOccured = true;
        player.Battle.FirstRound = false;
    }

    private void UseUltimate()
    {
        if (player.Ultimate.CurrentCharge >= player.Ultimate.MaxCharge)
        {
            BattleService.UseUltimate(player, enemies);
        }
    }
}
