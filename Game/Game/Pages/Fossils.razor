@page "/fossils"
@using Game.Data;
@using Game.Data.Dinosaurs;
@using Game.Data.Fossils;
@using Game.Services;
@inject IPlayerDinosaurService DinosaurService
@inject IPlayerFossilService FossilService
@inject IAmberService AmberService
@inject NavigationManager NavigationManager

<div style="text-align:center">
    <h1><b>Hunt For Dinosaur Fossils</b></h1>
    <img src="/images/dinosaurbones.png"/>
    @if (!HasEnough)
    {
        <div class="alert alert-danger" role="alert">
            <p>Gather more amber to crack open. If you are lucky, you might find dinosaur DNA!</p>
            <button class="btn btn-danger" @onclick="RedirectToAmber">Gather More Amber</button>
        </div>
    }
    <p>Total Amber: @player.Amber</p>
    <p>Amber Needed to Hunt for New Fossils: @player.AmberPerFossil</p>
    <button class="btn btn-primary" @onclick="GetNewFossil">Crack Amber</button>
    <button class="btn btn-primary" @onclick="GetFiveFossils">Crack 5 Amber</button>
</div>

<div style="text-align:center;">
    <h3><b>Fossil Inventory</b></h3>
    <p>Total DNA Samples: @player.Fossils.Count()</p>
    @if(clawCount > 0)
    {
        <p>Raptor Claw Pieces: @clawCount</p>
    }
    @if (skullCount > 0)
    {
        <p>Raptor Skull Fragment: @skullCount</p>
    }
    @if(footCount > 0)
    {
        <p>Raptor Foot Bones: @footCount</p>
    }
    @if(ribCount > 0)
    {
        <p>Raptor Ribs: @ribCount</p>
    }    
</div>


@code {
    [CascadingParameter]
    public Player player { get; set; }

    public bool HasEnough { get; set; } = true;
    public int clawCount = 0;
    public int skullCount = 0;
    public int footCount = 0;
    public int ribCount = 0;

    protected override async Task OnInitializedAsync()
    {
        GetRaptorFossilCount(player);
    }

    private void GetNewFossil()
    {
        var enoughGold = AmberService.HasEnough(player, player.AmberPerFossil);
        if (enoughGold)
        {
            HasEnough = true;
            player.Amber = AmberService.Pay(player.AmberPerFossil, player.Amber);
            player = FossilService.HuntForFossil(player);
        }
        else
        {
            HasEnough = false;
        }
        GetRaptorFossilCount(player);
    }

    private void GetFiveFossils()
    {
        for (int i = 0; i < 5; i++)
        {
            GetNewFossil();
        }        
    }

    private void RedirectToAmber()
    {
        NavigationManager.NavigateTo("/amber");
    }

    public void GetRaptorFossilCount(Player player)
    {
        clawCount = 0;
        skullCount = 0;
        footCount = 0;
        ribCount = 0;

        foreach (var fossil in player.Fossils)
        {
            if (fossil.DinosaurType == DinosaurTypeEnum.Raptor)
            {
                if (fossil.FossilType == FossilType.Claw)
                    clawCount++;
                if (fossil.FossilType == FossilType.Ribs)
                    ribCount++;
                if (fossil.FossilType == FossilType.Skull)
                    skullCount++;
                if (fossil.FossilType == FossilType.Foot)
                    footCount++;
            }
        }
    }
}
