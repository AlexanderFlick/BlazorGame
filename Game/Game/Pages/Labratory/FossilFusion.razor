@page "/labratory/fusion"
@using Game.Data;
@using Game.Data.Dinosaurs;
@using Game.Data.Fossils;
@using Game.Pages.Components.Buttons
@using Game.Pages.Components.DinosaurComponents
@using Game.Pages.Components.FossilComponents
@using Game.Services;
@inject NavigationManager NavigationManager
@inject IFusionService FusionService
@inject IPlayerFossilService FossilService
@inject IDinosaurService DinosaurService
@inject IAccessService AccessService

<h3>Labratory</h3>
<img src="images/lab.png" />

@if (shortResources)
{
    <div class="alert alert-danger" role="alert">
        <p>Fossil requirement not met! Crack open more <b><i>Amber</i></b> to find fossils.</p>
        <RedirectButton ButtonPath="" />
        <button class="btn btn-danger" @onclick="RedirectToFossil">Get More Fossils</button>
    </div>
}

@if (newDinosaurCreated)
{
    <h2>New @newDinosaur.DinosaurType Created!!!</h2>
    <DinosaurBaseInfo Dinosaur="newDinosaur" />
    <div @onclick="() => AddDinosaur(newDinosaur)">
        <ActionButton ButtonText="Add to Party" />
    </div>
    <div @onclick="DismissDinosaur">
        <ActionButton ButtonText="Dismiss" />
    </div>
}

<div style="text-align:center; float:left">
    <FossilSummary />
    @if (maxPartySize)
    {
        <div class="alert alert-danger" role="alert">
            <p>Max Party Size Reached!</p>
            <RedirectButton ButtonPath="/party" ButtonText="Party" />
        </div>
    }
    <div @onclick="FuseCarnivoreFossils">
        <ActionButton ButtonText="Fuse Carnivore" />
    </div>
    <div @onclick="FuseHerbivoreFossils">
        <ActionButton ButtonText="Fuse Herbivore" />
    </div>
    <br />
    <RedirectButton ButtonPath="/labratory" ButtonText="Back to Lab" />
</div>

@code {
    [CascadingParameter]
    public Player player { get; set; }

    public bool newDinosaurCreated = false;
    public bool shortResources = false;
    public bool maxPartySize = false;
    public int clawCount = 0;
    public int skullCount = 0;
    public int footCount = 0;
    public int ribCount = 0;
    Dinosaur newDinosaur = new Dinosaur();

    protected override async Task OnInitializedAsync()
    {
        maxPartySize = false;
        shortResources = false;
    }

    private void FuseCarnivoreFossils()
    {
        newDinosaur.DinosaurType = DinosaurTypeEnum.Carnivore;

        if (player.Dinosaurs.Count >= player.MaxPartySize)
        {
            maxPartySize = true;
            return;
        }

        if (FusionService.HasResourcesToMakeDinosaur(player, newDinosaur))
        {
            shortResources = false;
            newDinosaur = DinosaurService.GetNewDinosaur(player, DinosaurTypeEnum.Carnivore);
            newDinosaurCreated = true;
            player = FossilService.RemoveFossils(player, newDinosaur);
        }
        else
        {
            shortResources = true;
        }
    }

    private void FuseHerbivoreFossils()
    {
        newDinosaur.DinosaurType = DinosaurTypeEnum.Herbivore;

        if (player.Dinosaurs.Count >= player.MaxPartySize)
        {
            maxPartySize = true;
            return;
        }

        if (FusionService.HasResourcesToMakeDinosaur(player, newDinosaur))
        {
            shortResources = false;
            newDinosaur = DinosaurService.GetNewDinosaur(player, DinosaurTypeEnum.Herbivore);
            newDinosaurCreated = true;
            player = FossilService.RemoveFossils(player, newDinosaur);
        }
        else
        {
            shortResources = true;
        }
    }

    public void AddDinosaur(Dinosaur dinosaur)
    {
        player.Dinosaurs.Add(dinosaur);
        AccessService.SetAccessIfFirstDinosaur(player);
        newDinosaurCreated = false;
    }

    public void DismissDinosaur()
    {
        newDinosaurCreated = false;
    }

    private void RedirectToFossil()
    {
        NavigationManager.NavigateTo("/labratory/splicer");
    }

    private void ExchangeFossils()
    {
        NavigationManager.NavigateTo("/labratory/exchange");
    }
}
