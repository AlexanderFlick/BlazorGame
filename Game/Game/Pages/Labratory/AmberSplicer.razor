@page "/labratory/splicer"
@using Game.Data;
@using Game.Data.Dinosaurs;
@using Game.Data.Fossils;
@using Game.Pages.Components.Buttons
@using Game.Pages.Components.FossilComponents
@using Game.Services;
@inject IPlayerDinosaurService DinosaurService
@inject IPlayerFossilService FossilService
@inject IAmberService AmberService
@inject IAccessService AccessService
@inject NavigationManager NavigationManager

<div>
    <h1><b>Amber Splicer</b></h1>
    <div>
        <div>
            <img src="/images/dinosaurbones.png" style="padding-bottom:30px;"/>
        </div>

        <div>
            <AmberShortageAlert HasEnough="hasEnough" />
            <div style="text-align:center; float:right;">
                <p>Total Amber: @player.Amber</p>
                @if (fossilAcquired)
                {
                    <NewFossilDescription NewFossilToDescribe="newFossil" ShowFossilInfo="showFossilInfo" />
                }
                else
                {
                    <p>No fossil acquired. Crack open another amber!</p>
                }
            </div>

            <div @onclick="GetNewFossil">
                <ActionButton ButtonText="Crack Amber" />
            </div>
            <br />
            <RedirectButton ButtonPath="/labratory" ButtonText="Back to Lab" />
        </div>
    </div>

    <div class="fossilSummary">
        <p>Carnivore Fossils:</p>
        @if (carnivoreClawCount >= @dinosaurFossil.Cost.Claw)
        {
            <span class="oi oi-circle-check"></span>

        }
        <p>Claws: @carnivoreClawCount/@dinosaurFossil.Cost.Claw</p>

        @if (carnivoreSkullCount >= @dinosaurFossil.Cost.Skull)
        {
            <span class="oi oi-circle-check"></span>

        }
        <p>Skulls: @carnivoreSkullCount/@dinosaurFossil.Cost.Skull</p>

        @if (carnivoreFootCount >= @dinosaurFossil.Cost.Foot)
        {
            <span class="oi oi-circle-check"></span>

        }
        <p>Feet: @carnivoreFootCount/@dinosaurFossil.Cost.Foot</p>

        @if (carnivoreRibCount >= @dinosaurFossil.Cost.Rib)
        {
            <span class="oi oi-circle-check"></span>

        }
        <p>Ribs: @carnivoreRibCount/@dinosaurFossil.Cost.Rib</p>

        <br />
        <p>Herbivore Fossils:</p>
        <p>Tail Spikes: @herbivoreSpikeCount/@dinosaurFossil.Cost.TailSpike</p>
        <p>Skulls: @herbivoreSkullCount/@dinosaurFossil.Cost.Skull</p>
        <p>Feet: @herbivoreFootCount/@dinosaurFossil.Cost.Foot</p>
        <p>Ribs: @herbivoreRibCount/@dinosaurFossil.Cost.Rib</p>
    </div>
</div>

@code {
    [CascadingParameter]
    public Player player { get; set; }

    public bool hasEnough { get; set; } = true;
    public bool showFossilInfo = false;
    public bool fossilAcquired = false;
    public Fossil? newFossil;

    private Dinosaur dinosaurFossil = new Dinosaur();

    public int carnivoreClawCount = 0;
    public int carnivoreSkullCount = 0;
    public int carnivoreFootCount = 0;
    public int carnivoreRibCount = 0;

    public int herbivoreSkullCount = 0;
    public int herbivoreSpikeCount = 0;
    public int herbivoreFootCount = 0;
    public int herbivoreRibCount = 0;

    private void GetNewFossil()
    {
        var enoughAmber = AmberService.HasEnough(player, 1);

        if (enoughAmber)
        {
            AddNewFossilAndRemoveAmber();
        }
        else
        {
            showFossilInfo = false;
            fossilAcquired = false;
            hasEnough = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        GetCarnivoreAndHerbivoreFossilCount();
        await Task.CompletedTask;
    }

    private void AddNewFossilAndRemoveAmber()
    {
        hasEnough = true;
        player.Amber = AmberService.Pay(1, player.Amber);
        newFossil = FossilService.SpliceAmberForFossil(player);

        if (newFossil is null)
        {
            fossilAcquired = false;
            showFossilInfo = false;
            return;
        }
        else
        {
            fossilAcquired = true;
            showFossilInfo = true;
            player.Fossils.Add(newFossil);
            AccessService.SetFossilFusionAccess(player);
            GetCarnivoreAndHerbivoreFossilCount();
        }
    }

    public void GetCarnivoreAndHerbivoreFossilCount()
    {
        carnivoreClawCount = 0;
        carnivoreSkullCount = 0;
        carnivoreFootCount = 0;
        carnivoreRibCount = 0;

        herbivoreSkullCount = 0;
        herbivoreSpikeCount = 0;
        herbivoreFootCount = 0;
        herbivoreRibCount = 0;

        foreach (var fossil in player.Fossils)
        {
            if (fossil.DinosaurType == DinosaurTypeEnum.Carnivore)
            {
                if (fossil.CarnivoreFossils == CarnivoreFossil.Claw)
                {
                    carnivoreClawCount++;
                }
                if (fossil.CarnivoreFossils == CarnivoreFossil.Skull)
                {
                    carnivoreSkullCount++;
                }
                if (fossil.CarnivoreFossils == CarnivoreFossil.Foot)
                {
                    carnivoreFootCount++;
                }
                if (fossil.CarnivoreFossils == CarnivoreFossil.Ribs)
                {
                    carnivoreRibCount++;
                }
            }

            if (fossil.DinosaurType == DinosaurTypeEnum.Herbivore)
            {
                if (fossil.HerbivoreFossils == HerbivoreFossil.TailSpikes)
                {
                    herbivoreSpikeCount++;
                }
                if (fossil.HerbivoreFossils == HerbivoreFossil.Skull)
                {
                    herbivoreSkullCount++;
                }
                if (fossil.HerbivoreFossils == HerbivoreFossil.Foot)
                {
                    herbivoreFootCount++;
                }
                if (fossil.HerbivoreFossils == HerbivoreFossil.Ribs)
                {
                    herbivoreRibCount++;
                }
            }
        }
    }
}
