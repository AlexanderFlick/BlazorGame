@page "/party/summary/{partyPosition}"
@using Game.Data;
@using Game.Data.Dinosaurs;
@using Game.Pages.Components
@using Game.Pages.Components.DinosaurComponents
@inject NavigationManager NavigationManager

<div>    
    <DinosaurBaseInfo Dinosaur="@dinosaur"/>
    <button class="btn btn-primary" style="margin-top:10px" @onclick="() => NavigateToItems(index)" value="@index">Items</button>
    <br />
    <button class="btn btn-primary" style="margin-top:10px" @onclick="() => NavigateToMoves(index)" value="@index">Moves</button>
    <br />
    <button class="btn btn-primary" style="margin-top:10px" @onclick="RenameDinosaur">Rename</button>
    <br />
    <button class="btn btn-primary" style="margin-top:10px" @onclick="NavigateToParty">Back To Party</button>

    @if (wantsToRename)
    {
        <div>
            <input @bind=@dinosaur.PetName>
        </div>
    }
    <br />
    <BackButton  />
</div>


@code {
    [CascadingParameter]
    public Player player { get; set; }

    [Parameter]
    public string partyPosition { get; set; }

    private Dinosaur dinosaur { get; set; }

    public int index { get; set; }
    public bool wantsToRename = false;

    protected override async Task OnInitializedAsync()
    {
        index = int.Parse(partyPosition);
        dinosaur = player.Dinosaurs.Where(x => x.PartyPosition == index).First();
    }

    public void RenameDinosaur()
    {
        wantsToRename = !wantsToRename;
    }

    private void NavigateToParty()
    {
        NavigationManager.NavigateTo($"/party");
    }

    public void NavigateToItems(int dinosaurIndex)
    {
        NavigationManager.NavigateTo($"/party/summary/{dinosaurIndex}/items");
    }

    public void NavigateToMoves(int dinosaurIndex)
    {
        NavigationManager.NavigateTo($"/party/summary/{dinosaurIndex}/moves");
    }
}
